output:
  sort-results: true
  uniq-by-line: true

run:
  skip-files:
    - "_test.go$" # Skip test files (this is only temporary, until we have tests)

linters-settings:
  decorder:
    # Required order of `type`, `const`, `var` and `func` declarations inside a file.
    # Default: types before constants before variables before functions.
    dec-order:
      - type
      - const
      - var
      - func

  dupl:
    # Tokens count to trigger issue.
    # Default: 150
    threshold: 100

  dupword:
    # Keywords used to ignore detection.
    # Default: []
    ignore: []

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    # Default: true
    errorf: true
    # Permit more than 1 %w verb, valid per Go 1.20 (Requires errorf:true)
    # Default: true
    errorf-multi: true
    # Check for plain type assertions and type switches.
    # Default: true
    asserts: true
    # Check for plain error comparisons.
    # Default: true
    comparison: true

  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
      - switch
      - map
    # Check switch statements in generated files also.
    # Default: false
    check-generated: false
    # Presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed.
    # Default: false
    default-signifies-exhaustive: true
    # Enum members matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness.
    # Default: ""
    ignore-enum-members: "Example.+"
    # Enum types matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness.
    # Default: ""
    ignore-enum-types: "Example.+"
    # Consider enums only in package scopes, not in inner scopes.
    # Default: false
    package-scope-only: false
    # Only run exhaustive check on switches with "//exhaustive:enforce" comment.
    # Default: false
    explicit-exhaustive-switch: false
    # Only run exhaustive check on map literals with "//exhaustive:enforce" comment.
    # Default: false
    explicit-exhaustive-map: false
    # Switch statement requires default case even if exhaustive.
    # Default: false
    default-case-required: false

  forbidigo:
    # Forbid the following identifiers (list of regexp).
    # Default: ["^(fmt\\.Print(|f|ln)|print|println)$"]
    forbid:
      # Builtin function:
      - ^print.*$
      # Optional message that gets included in error reports.
      - p: ^fmt\.Print.*$
        msg: Do not commit print statements.
      # Alternatively, put messages at the end of the regex, surrounded by `(# )?`
      # Escape any special characters. Those messages get included in error reports.
      - 'fmt\.Print.*(# Do not commit print statements\.)?'
      # Forbid spew Dump, whether it is called as function or method.
      # Depends on analyze-types below.
      - ^spew\.(ConfigState\.)?Dump$
      # The package name might be ambiguous.
      # The full import path can be used as additional criteria.
      # Depends on analyze-types below.
      - p: ^v1.Dump$
        pkg: ^example.com/pkg/api/v1$

  gocognit:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 30

  govet:
    # Report about shadowed variables.
    # Default: false
    check-shadowing: true
    # Enable all analyzers.
    # Default: false
    enable-all: true
    disable:
      - fieldalignment

  perfsprint:
    # Optimizes even if it requires an int or uint type cast.
    # Default: true
    int-conversion: true
    # Optimizes into `err.Error()` even if it is only equivalent for non-nil errors.
    # Default: false
    err-error: true
    # Optimizes `fmt.Errorf`.
    # Default: true
    errorf: true
    # Optimizes `fmt.Sprintf` with only one argument.
    # Default: true
    sprintf1: true

  predeclared:
    # Comma-separated list of predeclared identifiers to not report on.
    # Default: ""
    ignore: ""
    # Include method names and field names (i.e., qualified names) in checks.
    # Default: false
    q: true

  revive:
    rules:
      - name: unexported-return
        disabled: true

  unused:
    # Mark all struct fields that have been written to as used.
    # Default: true
    field-writes-are-uses: true
    # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
    # Default: false
    post-statements-are-reads: false
    # Mark all exported identifiers as used.
    # Default: true
    exported-is-used: true
    # Mark all exported fields as used.
    # default: true
    exported-fields-are-used: true
    # Mark all function parameters as used.
    # default: true
    parameters-are-used: true
    # Mark all local variables as used.
    # default: true
    local-variables-are-used: true
    # Mark all identifiers inside generated files as used.
    # Default: true
    generated-is-used: true

  whitespace:
    # Enforces newlines (or comments) after every multi-line if statement.
    # Default: false
    multi-if: false
    # Enforces newlines (or comments) after every multi-line function signature.
    # Default: false
    multi-func: false

linters:
  enable:
    - asciicheck
    - bidichk
    - bodyclose
    - contextcheck
    - decorder
    - dupl
    - dupword
    - errname
    - errorlint
    - forbidigo
    - forcetypeassert
    - gochecksumtype
    - gocognit
    - goconst
    - gocritic
    - gofmt
    - gosec
    - gosimple
    - gosmopolitan
    - govet
    - importas
    - inamedparam
    - ineffassign
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - noctx
    - perfsprint
    - predeclared
    - reassign
    - revive
    - sqlclosecheck
    - staticcheck
    - tagliatelle
    - testifylint
    - unparam
    - unused
    - usestdlibvars
    - wastedassign
    - whitespace